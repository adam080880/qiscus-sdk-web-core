import { Callback, IQCallback1, IQCallback2, IQProgressListener, Subscription } from './defs';
import * as model from './model';
export type { IQAccount, IQChatRoom, IQMessage, IQParticipant, IQUser } from './model';
export default class Qiscus {
    private static _instance;
    private storage;
    private readonly apiAdapter;
    private readonly hookAdapter;
    private readonly userAdapter;
    private readonly realtimeAdapter;
    private readonly loggerAdapter;
    private readonly roomAdapter;
    private readonly messageAdapter;
    private readonly _onMessageReceived$;
    private readonly _onMessageUpdated$;
    private readonly _onMessageRead$;
    private readonly _onMessageDelivered$;
    private readonly _onMessageDeleted$;
    private readonly _onRoomCleared$;
    static get instance(): Qiscus;
    get appId(): string;
    get token(): string;
    get isLogin(): boolean;
    get currentUser(): model.IQAccount;
    setup(appId: string): Promise<void>;
    setup(appId: string, callback?: IQCallback1): void;
    setupWithCustomServer(appId: string, baseUrl?: string, brokerUrl?: string, brokerLbUrl?: string, syncInterval?: number): Promise<void>;
    setupWithCustomServer(appId: string, baseUrl?: string, brokerUrl?: string, brokerLbUrl?: string, syncInterval?: number, callback?: IQCallback1): void;
    setCustomHeader(headers: Record<string, string>): void;
    setUser(userId: string, userKey: string, username?: string, avatarUrl?: string, extras?: object | null): Promise<model.IQAccount>;
    setUser(userId: string, userKey: string, username?: string, avatarUrl?: string, extras?: object | null, callback?: null | IQCallback2<model.IQAccount>): void;
    blockUser(userId: string): Promise<model.IQUser>;
    blockUser(userId: string, callback?: IQCallback2<model.IQUser>): void;
    clearUser(): Promise<void>;
    clearUser(callback?: IQCallback1): void;
    unblockUser(userId: string): Promise<model.IQUser>;
    unblockUser(userId: string, callback: IQCallback2<model.IQUser>): void;
    updateUser(username: string, avatarUrl: string, extras?: object): Promise<model.IQAccount>;
    updateUser(username: string, avatarUrl: string, extras?: object, callback?: IQCallback2<model.IQAccount>): void;
    updateMessage(message: model.IQMessage): Promise<void>;
    updateMessage(message: model.IQMessage, callback?: IQCallback1): void;
    getBlockedUsers(page?: number, limit?: number): Promise<model.IQUser[]>;
    getBlockedUsers(page?: number, limit?: number, callback?: IQCallback2<model.IQUser[]>): void;
    getUsers(searchUsername?: string, page?: number, limit?: number): Promise<model.IQUser[]>;
    getUsers(searchUsername?: string, page?: number, limit?: number, callback?: IQCallback2<model.IQUser[]>): void;
    getJWTNonce(): Promise<string>;
    getJWTNonce(callback: IQCallback2<string>): void;
    getUserData(): Promise<model.IQAccount>;
    getUserData(callback: IQCallback2<model.IQAccount>): void;
    registerDeviceToken(token: string, isDevelopment: boolean): Promise<boolean>;
    registerDeviceToken(token: string, isDevelopment: boolean, callback: IQCallback2<boolean>): void;
    removeDeviceToken(token: string, isDevelopment: boolean): Promise<boolean>;
    removeDeviceToken(token: string, isDevelopment: boolean, callback: IQCallback2<boolean>): void;
    updateChatRoom(roomId: number, name?: string, avatarUrl?: string, extras?: object): Promise<model.IQChatRoom>;
    updateChatRoom(roomId: number, name?: string, avatarUrl?: string, extras?: object, callback?: IQCallback2<model.IQChatRoom>): void;
    setUserWithIdentityToken(token: string): Promise<model.IQAccount>;
    setUserWithIdentityToken(token: string, callback?: IQCallback2<model.IQAccount>): void;
    getChannel(uniqueId: string): Promise<model.IQChatRoom>;
    getChannel(uniqueId: string, callback?: IQCallback2<model.IQChatRoom>): void;
    chatUser(userId: string, extras?: Record<string, any>): Promise<model.IQChatRoom>;
    chatUser(userId: string, extras?: Record<string, any>, callback?: IQCallback2<model.IQChatRoom>): void;
    addParticipants(roomId: number, userIds: string[]): Promise<model.IQParticipant[]>;
    addParticipants(roomId: number, userIds: string[], callback?: IQCallback2<model.IQParticipant[]>): void;
    removeParticipants(roomId: number, userIds: string[]): Promise<model.IQParticipant[] | string[]>;
    removeParticipants(roomId: number, userIds: string[], callback?: IQCallback2<model.IQParticipant[]>): void;
    clearMessagesByChatRoomId(roomUniqueIds: string[]): Promise<void>;
    clearMessagesByChatRoomId(roomUniqueIds: string[], callback?: IQCallback1): void;
    createGroupChat(name: string, userIds: string[], avatarUrl?: string, extras?: object): Promise<model.IQChatRoom>;
    createGroupChat(name: string, userIds: string[], avatarUrl?: string, extras?: object, callback?: IQCallback2<model.IQChatRoom>): void;
    createChannel(uniqueId: string, name?: string, avatarUrl?: string, extras?: object): Promise<model.IQChatRoom>;
    createChannel(uniqueId: string, name?: string, avatarUrl?: string, extras?: object, callback?: IQCallback2<model.IQChatRoom>): void;
    getParticipants(roomUniqueId: string, page?: number, limit?: number, sorting?: 'asc' | 'desc'): Promise<model.IQParticipant[]>;
    getParticipants(roomUniqueId: string, page?: number, limit?: number, sorting?: 'asc' | 'desc', callback?: IQCallback2<model.IQParticipant[]>): void;
    getChatRooms(roomIds: number[], page?: number, showRemoved?: boolean, showParticipant?: boolean): Promise<model.IQChatRoom[]>;
    getChatRooms(uniqueIds: string[], page?: number, showRemoved?: boolean, showParticipant?: boolean, callback?: IQCallback2<model.IQChatRoom[]>): void;
    getAllChatRooms(showParticipant?: boolean, showRemoved?: boolean, showEmpty?: boolean, page?: number, limit?: number): Promise<model.IQChatRoom[]>;
    getAllChatRooms(showParticipant?: boolean, showRemoved?: boolean, showEmpty?: boolean, page?: number, limit?: number, callback?: IQCallback2<model.IQChatRoom[]>): void;
    getChatRoomWithMessages(roomId: number): Promise<[model.IQChatRoom, model.IQMessage[]]>;
    getChatRoomWithMessages(roomId: number, callback?: IQCallback2<[model.IQChatRoom, model.IQMessage[]]>): void;
    getTotalUnreadCount(): Promise<number>;
    getTotalUnreadCount(callback?: IQCallback2<number>): void;
    getRoomUnreadCount(): Promise<number>;
    getRoomUnreadCount(callback?: IQCallback2<number>): void;
    sendMessage(message: model.IQMessage): Promise<model.IQMessage>;
    sendMessage(message: model.IQMessage, callback?: IQCallback2<model.IQMessage>): void;
    markAsDelivered(roomId: number, messageId: number): Promise<void>;
    markAsDelivered(roomId: number, messageId: number, callback?: IQCallback2<void>): void;
    markAsRead(roomId: number, messageId: number): Promise<void>;
    markAsRead(roomId: number, messageId: number, callback?: IQCallback2<void>): void;
    deleteMessages(messageUniqueIds: string[]): Promise<model.IQMessage[]>;
    deleteMessages(messageUniqueIds: string[], callback?: IQCallback2<model.IQMessage[]>): void;
    getPreviousMessagesById(roomId: number, limit?: number, messageId?: number): Promise<model.IQMessage[]>;
    getPreviousMessagesById(roomId: number, limit?: number, messageId?: number, callback?: IQCallback2<model.IQMessage[]>): void;
    getNextMessagesById(roomId: number, limit?: number, messageId?: number): Promise<model.IQMessage[]>;
    getNextMessagesById(roomId: number, limit?: number, messageId?: number, callback?: IQCallback2<model.IQMessage[]>): void;
    searchMessage(opts: {
        query: string;
        roomIds: number[];
        userId?: string;
        type?: string;
        roomType?: string;
        page?: number;
        limit?: number;
    }): Promise<model.IQMessage[]>;
    searchMessage(opts: {
        query: string;
        roomIds: number[];
        userId?: string;
        type?: string;
        roomType?: string;
        page?: number;
        limit?: number;
        callback?: (messages?: model.IQMessage[], error?: Error) => void;
    }): void;
    getFileList(opts: {
        roomIds?: number[];
        fileType?: string;
        page?: number;
        limit?: number;
    }): Promise<model.IQMessage[]>;
    getFileList(opts: {
        roomIds?: number[];
        fileType?: string;
        page?: number;
        limit?: number;
        callback?: (messages?: model.IQMessage[], error?: Error) => void;
    }): void;
    publishCustomEvent(roomId: number, data: any): Promise<void>;
    publishCustomEvent(roomId: number, data: any, callback?: IQCallback1): void;
    publishOnlinePresence(isOnline: boolean): Promise<void>;
    publishOnlinePresence(isOnline: boolean, callback?: IQCallback1): void;
    publishTyping(roomId: number, isTyping?: boolean): Promise<void>;
    publishTyping(roomId: number, isTyping?: boolean, callback?: IQCallback1): void;
    subscribeCustomEvent(roomId: number, callback: IQCallback2<any>): void;
    unsubscribeCustomEvent(roomId: number): void;
    upload(file: File, callback?: IQProgressListener): void;
    hasSetupUser(): Promise<boolean>;
    hasSetupUser(callback: IQCallback2<boolean>): void;
    sendFileMessage(message: model.IQMessage, file: File, callback?: IQProgressListener<model.IQMessage>): void;
    getThumbnailURL(url: string): string;
    setSyncInterval(interval: number): void;
    synchronize(lastMessageId: model.IQAccount['lastMessageId']): void;
    synchronizeEvent(lastEventId: model.IQAccount['lastSyncEventId']): void;
    enableDebugMode(enable: boolean, callback?: IQCallback1): void;
    static Interceptor: {
        MESSAGE_BEFORE_SENT: string;
        MESSAGE_BEFORE_RECEIVED: string;
    };
    get Interceptor(): {
        MESSAGE_BEFORE_SENT: string;
        MESSAGE_BEFORE_RECEIVED: string;
    };
    intercept(interceptor: string, callback: (data: unknown) => unknown): () => void;
    onMessageReceived(handler: (message: model.IQMessage) => void): () => void;
    onMessageUpdated(handler: (message: model.IQMessage) => void): () => void;
    onMessageDeleted(handler: (message: model.IQMessage) => void): Subscription;
    onMessageDelivered(handler: (message: model.IQMessage) => void): Subscription;
    onMessageRead(handler: (message: model.IQMessage) => void): Subscription;
    onUserTyping(handler: (userId: string, roomId: number, isTyping: boolean) => void): Subscription;
    onUserOnlinePresence(handler: (userId: string, isOnline: boolean, lastSeen: Date) => void): Subscription;
    onChatRoomCleared(handler: Callback<number>): Subscription;
    onConnected(handler: () => void): Subscription;
    onReconnecting(handler: () => void): Subscription;
    onDisconnected(handler: () => void): Subscription;
    subscribeChatRoom(room: model.IQChatRoom): void;
    unsubscribeChatRoom(room: model.IQChatRoom): void;
    subscribeUserOnlinePresence(userId: string): void;
    unsubscribeUserOnlinePresence(userId: string): void;
    _generateUniqueId(): string;
    generateMessage({ roomId, text, extras, }: {
        roomId: number;
        text: string;
        extras?: Record<string, any>;
    }): model.IQMessage;
    generateFileAttachmentMessage({ roomId, caption, url, text, extras, filename, size, }: {
        roomId: number;
        caption: string;
        url: string;
        text: string;
        extras?: Record<string, unknown>;
        filename?: string;
        size?: number;
    }): model.IQMessage;
    generateCustomMessage({ roomId, text, type, payload, extras, }: {
        roomId: number;
        text: string;
        type: string;
        extras?: Record<string, unknown>;
        payload?: Record<string, any>;
    }): model.IQMessage;
    generateReplyMessage({ roomId, text, repliedMessage, extras, }: {
        roomId: number;
        text: string;
        repliedMessage: model.IQMessage;
        extras?: Record<string, unknown>;
    }): model.IQMessage;
}
