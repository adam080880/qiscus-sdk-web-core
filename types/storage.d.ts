import { IQAccount, IQChatRoom, IQMessage } from './model';
export declare type Storage = ReturnType<typeof storageFactory>;
export declare const listStorageFactory: <T extends unknown>() => {
    getOrSet(id: string, valueIfNull: T): T | undefined;
    [Symbol.iterator]: () => IterableIterator<[string, T]>;
};
export declare type ListStorageFactory = ReturnType<typeof listStorageFactory>;
export declare const storageFactory: () => {
    defaultBaseURL: string;
    defaultUploadUrl: string;
    defaultBrokerLbUrl: string;
    defaultBrokerUrl: string;
    defaultSyncInterval: number;
    defaultSyncIntervalWhenConnected: number;
    __storage: Record<string, any>;
    getAppId: () => string;
    setAppId: (value: string) => void;
    getBaseUrl: () => string;
    setBaseUrl: (value: string) => void;
    getBrokerUrl: () => string;
    setBrokerUrl: (value: string) => void;
    getBrokerLbUrl: () => string;
    setBrokerLbUrl: (value: string) => void;
    getUploadUrl: () => string;
    setUploadUrl: (value: string) => void;
    getSyncInterval: () => number;
    setSyncInterval: (value: number) => void;
    getSyncIntervalWhenConnected: () => number;
    setSyncIntervalWhenConnected: (value: number) => void;
    getVersion: () => string;
    setVersion: (value: string) => void;
    getAccSyncInterval: () => number;
    setAccSyncInterval: (value: number) => void;
    getDebugEnabled: () => boolean;
    setDebugEnabled: (value: boolean) => void;
    getBrokerLbEnabled: () => boolean;
    setBrokerLbEnabled: (value: boolean) => void;
    getToken: () => string;
    setToken: (value: string) => void;
    getCurrentUser: () => IQAccount;
    setCurrentUser: (value: IQAccount) => void;
    getCustomHeaders: () => Record<string, string>;
    setCustomHeaders: (value: Record<string, string>) => void;
    getRooms: () => IQChatRoom[];
    setRooms: (value: IQChatRoom[]) => void;
    getMessages: () => IQMessage[];
    setMessages: (value: IQMessage[]) => void;
    getLastMessageId: () => number;
    setLastMessageId: (value: number) => void;
    getLastEventId: () => string;
    setLastEventId: (value: string) => void;
};
