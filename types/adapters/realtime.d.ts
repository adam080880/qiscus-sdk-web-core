import { ApiRequester } from 'src/api';
import { Callback, Subscription } from '../defs';
import * as model from '../model';
import { Storage } from '../storage';
export declare type SyncMethod<T extends any[]> = (callback: (...data: T) => void) => Subscription;
export declare type RealtimeAdapter = ReturnType<typeof getRealtimeAdapter>;
export default function getRealtimeAdapter(storage: Storage, api: ApiRequester): {
    sync: {
        synchronize(messageId: number): void;
        synchronizeEvent(eventId: string): void;
        onNewMessage(callback: (message: model.IQMessage) => void): () => void;
        onMessageUpdated(callback: (message: model.IQMessage) => void): () => void;
        onMessageDelivered(callback: (m: model.IQMessage) => void): () => void;
        onMessageRead(callback: (m: model.IQMessage) => void): () => void;
        onMessageDeleted(callback: (message: model.IQMessage) => void): () => void;
        onRoomCleared(callback: (room: model.IQChatRoom) => void): () => void;
        onSynchronized(callback: () => void): () => void;
    };
    readonly mqtt: {
        readonly mqtt: (import("mqtt").Client & {
            _resubscribeTopics: string[];
        }) | undefined;
        clear(): void;
        conneck(): void;
        onMqttConnected(callback: () => void): () => void;
        onMqttReconnecting(callback: () => void): Subscription;
        onMqttDisconnected(callback: () => void): Subscription;
        onMessageDeleted(callback: (data: model.IQMessage) => void): () => void;
        onMessageDelivered(callback: (data: model.IQMessage) => void): () => void;
        onMessageRead(callback: (m: model.IQMessage) => void): () => void;
        onNewMessage(callback: (data: model.IQMessage) => void): () => void;
        onMessageUpdated(callback: (data: model.IQMessage) => void): () => void;
        onRoomDeleted(callback: (data: number) => void): () => void;
        onUserPresence(callback: (userId: string, isOnline: boolean, lastSeen: Date) => void): () => void;
        onUserTyping(callback: (userId: string, roomId: number, isTyping: boolean) => void): () => void;
        publishCustomEvent(roomId: number, userId: string, data: any): void;
        subscribeCustomEvent(roomId: number, callback: Callback<any>): void;
        unsubscribeCustomEvent(roomId: number): void;
        sendPresence(userId: string, isOnline: boolean): void;
        sendTyping(roomId: number, userId: string, isTyping: boolean): void;
        subscribeUser(userToken: string): Subscription;
        subscribeUserPresence(userId: string): void;
        unsubscribeUserPresence(userId: string): void;
        subscribeRoom(roomId: number): void;
        unsubscribeRoom(roomId: number): void;
        subscribeChannel(appId: string, channelUniqueId: string): void;
        unsubscribeChannel(appId: string, channelUniqueId: string): void;
    };
    clear(): void;
    onMessageDeleted(callback: Callback<model.IQMessage>): Subscription;
    onMessageDelivered(callback: Callback<model.IQMessage>): Subscription;
    onMessageRead(callback: Callback<model.IQMessage>): Subscription;
    onNewMessage(callback: Callback<model.IQMessage>): Subscription;
    onMessageUpdated(callback: Callback<model.IQMessage>): Subscription;
    onNewMessage$(): import("xstream").Stream<model.IQMessage>;
    readonly onMessageUpdated$: import("xstream").Stream<model.IQMessage>;
    onMessageRead$(): import("xstream").Stream<model.IQMessage>;
    onMessageDelivered$(): import("xstream").Stream<model.IQMessage>;
    readonly onMessageDeleted$: import("xstream").Stream<model.IQMessage>;
    onRoomCleared$(): import("xstream").Stream<number | model.IQChatRoom>;
    onPresence(callback: (userId: string, isOnline: boolean, lastSeen: Date) => void): Subscription;
    onRoomCleared(callback: Callback<number>): Subscription;
    onTyping(callback: (userId: string, roomId: number, isTyping: boolean) => void): Subscription;
    sendPresence(userId: string, isOnline: boolean): void;
    sendTyping(roomId: number, userId: string, isTyping: boolean): void;
    synchronize(lastMessageId: model.IQAccount['lastMessageId']): void;
    synchronizeEvent(lastEventId: model.IQAccount['lastSyncEventId']): void;
};
